"""
Recover the toy dataset generated by example/generate_toy/bnmtf/generate_bnmtf.py
using BNMTF-ARD VB, model 3.

We can plot the MSE, R2 and Rp as it converges.

We have I=100, J=80, K=5, L=5.
We give flatter priors (1/10) than what was used to generate the data (1).
"""

project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from BNMTF_ARD.code.models.bnmtf_ard_vb_3 import bnmtf_ard_vb_3

import numpy, matplotlib.pyplot as plt, itertools

##########

input_folder = project_location+"BNMTF/experiments/generate_toy/bnmtf/"

iterations = 100
init = 'kmeans'
K, L = 10, 10

alphaR, betaR = 1., 1.
alpha0, beta0 = 1e-14, 1e-14
lambdaS = 1
priors = { 'alphaR':alphaR, 'betaR':betaR, 'alpha0':alpha0, 'beta0':beta0, 'lambdaS':lambdaS }

# Load in data
R = numpy.loadtxt(input_folder+"R.txt")
I,J = R.shape
M = numpy.ones((I,J))

# Give the same random initialisation
numpy.random.seed(3)

# Run the Gibbs sampler
BNMTF = bnmtf_ard_vb_3(R,M,K,L,priors)
BNMTF.initialise(init)
BNMTF.run(iterations)

exp_taus = BNMTF.all_exp_tau
exp_lambdaFs = BNMTF.all_exp_lambdaF
exp_lambdaGs = BNMTF.all_exp_lambdaG

F, S, G = BNMTF.exp_F, BNMTF.exp_S, BNMTF.exp_G
inv_lambdaF, inv_lambdaG = 1./BNMTF.exp_lambdaF, 1./BNMTF.exp_lambdaG

# Plot tau against iterations to see that it converges
f, axarr = plt.subplots(3, sharex=True)
x = range(1,len(exp_taus)+1)
axarr[0].set_title('Convergence of values')
axarr[0].plot(x, exp_taus)
axarr[0].set_ylabel("tau")
for k in range(0,K):
    axarr[1].plot(x, 1./exp_lambdaFs[:,k])    
axarr[1].set_ylabel("1/lambdaF")
for l in range(0,L):
    axarr[2].plot(x, 1./exp_lambdaGs[:,l])  
axarr[2].set_ylabel("1/lambdaG")
axarr[2].set_xlabel("Iterations")

# Extract the performances across all iterations
print "vb_all_performances = %s" % BNMTF.all_performances